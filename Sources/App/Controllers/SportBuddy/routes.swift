import Vapor
import RoutingKit

// routes.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: 

extension String {
  var asPathComponents: [PathComponent] {
    return self.split(separator: "/").map {
      if $0.starts(with: "{") && $0.hasSuffix("}") {
        let start = $0.index($0.startIndex, offsetBy: 1)
        let end = $0.index($0.endIndex, offsetBy: -1)
        return PathComponent.parameter(String($0[start..<end]))
      } else {
        return PathComponent.constant(.init($0))
      }
    }
  }
}

public protocol AuthenticationMiddleware: Middleware {
  associatedtype AuthType: Authenticatable
  func authType() -> AuthType.Type
}

//Used when auth is not used
public class DummyAuthType: Authenticatable {}

public func routes<authForBearer: AuthenticationMiddleware, backend: BackendApiDelegate>
  (_ app: RoutesBuilder, backend: backend, authForBearer: authForBearer)
  throws
  where authForBearer.AuthType == backend.AuthType
  {
  let groupForBearer = app.grouped([authForBearer])
  //for admin
  groupForBearer.on(.DELETE, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesDeleteResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    return try backend.chatEntriesDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId)
  }
  groupForBearer.on(.GET, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesGetResponse> in
    return try backend.chatEntriesGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.PATCH, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPatchResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    return try backend.chatEntriesPatch(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId)
  }
  groupForBearer.on(.POST, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPostResponse> in
    let chatIdOptional = try? request.query.get(UUID.self, at: "chatId")
    guard let chatId = chatIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatId")
    }
    let messageOptional = try? request.query.get(String.self, at: "message")
    guard let message = messageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter message")
    }
    return try backend.chatEntriesPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatId: chatId, message: message)
  }
  groupForBearer.on(.PUT, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPutResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    let modifiedMessageOptional = try? request.query.get(String.self, at: "modifiedMessage")
    guard let modifiedMessage = modifiedMessageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter modifiedMessage")
    }
    return try backend.chatEntriesPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId, modifiedMessage: modifiedMessage)
  }
  groupForBearer.on(.PUT, "/chat".asPathComponents) { (request: Request) -> EventLoopFuture<chatPutResponse> in
    let chatIdOptional = try? request.query.get(UUID.self, at: "chatId")
    guard let chatId = chatIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatId")
    }
    let users = try? request.query.get([UUID].self, at: "users")
    let body = try request.content.decode(String.self)
    return try backend.chatPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatId: chatId, body: body, users: users)
  }
  groupForBearer.on(.DELETE, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exerciseDeleteResponse> in
    let exerciseIdOptional = try? request.query.get(UUID.self, at: "exerciseId")
    guard let exerciseId = exerciseIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter exerciseId")
    }
    return try backend.exerciseDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), exerciseId: exerciseId)
  }
  groupForBearer.on(.GET, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exerciseGetResponse> in
    return try backend.exerciseGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exercisePostResponse> in
    let body = try request.content.decode(ExerciseDTO.self)
    return try backend.exercisePost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), body: body)
  }
  groupForBearer.on(.PUT, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exercisePutResponse> in
    let body = try request.content.decode(ExerciseDTO.self)
    return try backend.exercisePut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), body: body)
  }
  app.on(.POST, "/forgotPassword".asPathComponents) { (request: Request) -> EventLoopFuture<forgotPasswordPostResponse> in
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    return try backend.forgotPasswordPost(with: request, email: email)
  }
  groupForBearer.on(.DELETE, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesDeleteResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    return try backend.groupEntriesDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId)
  }
  groupForBearer.on(.GET, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesGetResponse> in
    return try backend.groupEntriesGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.PATCH, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPatchResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    return try backend.groupEntriesPatch(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId)
  }
  groupForBearer.on(.POST, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPostResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    let messageOptional = try? request.query.get(String.self, at: "message")
    guard let message = messageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter message")
    }
    return try backend.groupEntriesPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId, message: message)
  }
  groupForBearer.on(.PUT, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPutResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    let modifiedMessageOptional = try? request.query.get(String.self, at: "modifiedMessage")
    guard let modifiedMessage = modifiedMessageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter modifiedMessage")
    }
    return try backend.groupEntriesPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId, modifiedMessage: modifiedMessage)
  }
  groupForBearer.on(.DELETE, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingDeleteResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    return try backend.groupManagingDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId)
  }
  groupForBearer.on(.GET, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingGetResponse> in
    return try backend.groupManagingGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingPostResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    return try backend.groupManagingPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId)
  }
  groupForBearer.on(.PUT, "/group".asPathComponents) { (request: Request) -> EventLoopFuture<groupPutResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    let users = try? request.query.get([UUID].self, at: "users")
    let body = try request.content.decode(String.self)
    return try backend.groupPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId, body: body, users: users)
  }
  app.on(.POST, "/login".asPathComponents) { (request: Request) -> EventLoopFuture<loginPostResponse> in
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    let passwordOptional = try? request.query.get(String.self, at: "password")
    guard let password = passwordOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter password")
    }
    return try backend.loginPost(with: request, email: email, password: password)
  }
  groupForBearer.on(.POST, "/logout".asPathComponents) { (request: Request) -> EventLoopFuture<logoutPostResponse> in
    return try backend.logoutPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/refreshToken".asPathComponents) { (request: Request) -> EventLoopFuture<refreshTokenPostResponse> in
    return try backend.refreshTokenPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/searchUser".asPathComponents) { (request: Request) -> EventLoopFuture<searchUserPostResponse> in
    let nameOptional = try? request.query.get(String.self, at: "name")
    guard let name = nameOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter name")
    }
    return try backend.searchUserPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), name: name)
  }
  app.on(.GET, "/test".asPathComponents) { (request: Request) -> EventLoopFuture<testGetResponse> in
    return try backend.testGet(with: request)
  }
  //for backend
  groupForBearer.on(.DELETE, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesDeleteResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    return try backend.chatEntriesDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId)
  }
  groupForBearer.on(.GET, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesGetResponse> in
    return try backend.chatEntriesGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.PATCH, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPatchResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    return try backend.chatEntriesPatch(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId)
  }
  groupForBearer.on(.POST, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPostResponse> in
    let chatIdOptional = try? request.query.get(UUID.self, at: "chatId")
    guard let chatId = chatIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatId")
    }
    let messageOptional = try? request.query.get(String.self, at: "message")
    guard let message = messageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter message")
    }
    return try backend.chatEntriesPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatId: chatId, message: message)
  }
  groupForBearer.on(.PUT, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPutResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    let modifiedMessageOptional = try? request.query.get(String.self, at: "modifiedMessage")
    guard let modifiedMessage = modifiedMessageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter modifiedMessage")
    }
    return try backend.chatEntriesPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId, modifiedMessage: modifiedMessage)
  }
  groupForBearer.on(.PUT, "/chat".asPathComponents) { (request: Request) -> EventLoopFuture<chatPutResponse> in
    let chatIdOptional = try? request.query.get(UUID.self, at: "chatId")
    guard let chatId = chatIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatId")
    }
    let users = try? request.query.get([UUID].self, at: "users")
    let body = try request.content.decode(String.self)
    return try backend.chatPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatId: chatId, body: body, users: users)
  }
  groupForBearer.on(.DELETE, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exerciseDeleteResponse> in
    let exerciseIdOptional = try? request.query.get(UUID.self, at: "exerciseId")
    guard let exerciseId = exerciseIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter exerciseId")
    }
    return try backend.exerciseDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), exerciseId: exerciseId)
  }
  groupForBearer.on(.GET, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exerciseGetResponse> in
    return try backend.exerciseGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exercisePostResponse> in
    let body = try request.content.decode(ExerciseDTO.self)
    return try backend.exercisePost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), body: body)
  }
  groupForBearer.on(.PUT, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exercisePutResponse> in
    let body = try request.content.decode(ExerciseDTO.self)
    return try backend.exercisePut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), body: body)
  }
  app.on(.POST, "/forgotPassword".asPathComponents) { (request: Request) -> EventLoopFuture<forgotPasswordPostResponse> in
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    return try backend.forgotPasswordPost(with: request, email: email)
  }
  groupForBearer.on(.DELETE, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesDeleteResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    return try backend.groupEntriesDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId)
  }
  groupForBearer.on(.GET, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesGetResponse> in
    return try backend.groupEntriesGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.PATCH, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPatchResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    return try backend.groupEntriesPatch(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId)
  }
  groupForBearer.on(.POST, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPostResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    let messageOptional = try? request.query.get(String.self, at: "message")
    guard let message = messageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter message")
    }
    return try backend.groupEntriesPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId, message: message)
  }
  groupForBearer.on(.PUT, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPutResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    let modifiedMessageOptional = try? request.query.get(String.self, at: "modifiedMessage")
    guard let modifiedMessage = modifiedMessageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter modifiedMessage")
    }
    return try backend.groupEntriesPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId, modifiedMessage: modifiedMessage)
  }
  groupForBearer.on(.DELETE, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingDeleteResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    return try backend.groupManagingDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId)
  }
  groupForBearer.on(.GET, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingGetResponse> in
    return try backend.groupManagingGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingPostResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    return try backend.groupManagingPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId)
  }
  groupForBearer.on(.PUT, "/group".asPathComponents) { (request: Request) -> EventLoopFuture<groupPutResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    let users = try? request.query.get([UUID].self, at: "users")
    let body = try request.content.decode(String.self)
    return try backend.groupPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId, body: body, users: users)
  }
  groupForBearer.on(.POST, "/image".asPathComponents) { (request: Request) -> EventLoopFuture<imagePostResponse> in
    let body = try request.content.decode(String.self)
    return try backend.imagePost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), body: body)
  }
  app.on(.POST, "/login".asPathComponents) { (request: Request) -> EventLoopFuture<loginPostResponse> in
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    let passwordOptional = try? request.query.get(String.self, at: "password")
    guard let password = passwordOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter password")
    }
    return try backend.loginPost(with: request, email: email, password: password)
  }
  groupForBearer.on(.POST, "/logout".asPathComponents) { (request: Request) -> EventLoopFuture<logoutPostResponse> in
    return try backend.logoutPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/refreshToken".asPathComponents) { (request: Request) -> EventLoopFuture<refreshTokenPostResponse> in
    return try backend.refreshTokenPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  app.on(.POST, "/register".asPathComponents) { (request: Request) -> EventLoopFuture<registerPostResponse> in
    let nameOptional = try? request.query.get(String.self, at: "name")
    guard let name = nameOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter name")
    }
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    let passwordOptional = try? request.query.get(String.self, at: "password")
    guard let password = passwordOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter password")
    }
    return try backend.registerPost(with: request, name: name, email: email, password: password)
  }
  groupForBearer.on(.POST, "/searchUser".asPathComponents) { (request: Request) -> EventLoopFuture<searchUserPostResponse> in
    let nameOptional = try? request.query.get(String.self, at: "name")
    guard let name = nameOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter name")
    }
    return try backend.searchUserPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), name: name)
  }
  app.on(.GET, "/test".asPathComponents) { (request: Request) -> EventLoopFuture<testGetResponse> in
    return try backend.testGet(with: request)
  }
  //for client
  groupForBearer.on(.DELETE, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesDeleteResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    return try backend.chatEntriesDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId)
  }
  groupForBearer.on(.GET, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesGetResponse> in
    return try backend.chatEntriesGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.PATCH, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPatchResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    return try backend.chatEntriesPatch(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId)
  }
  groupForBearer.on(.POST, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPostResponse> in
    let chatIdOptional = try? request.query.get(UUID.self, at: "chatId")
    guard let chatId = chatIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatId")
    }
    let messageOptional = try? request.query.get(String.self, at: "message")
    guard let message = messageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter message")
    }
    return try backend.chatEntriesPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatId: chatId, message: message)
  }
  groupForBearer.on(.PUT, "/chatEntries".asPathComponents) { (request: Request) -> EventLoopFuture<chatEntriesPutResponse> in
    let chatEntryDTOIdOptional = try? request.query.get(UUID.self, at: "chatEntryDTOId")
    guard let chatEntryDTOId = chatEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatEntryDTOId")
    }
    let modifiedMessageOptional = try? request.query.get(String.self, at: "modifiedMessage")
    guard let modifiedMessage = modifiedMessageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter modifiedMessage")
    }
    return try backend.chatEntriesPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatEntryDTOId: chatEntryDTOId, modifiedMessage: modifiedMessage)
  }
  groupForBearer.on(.PUT, "/chat".asPathComponents) { (request: Request) -> EventLoopFuture<chatPutResponse> in
    let chatIdOptional = try? request.query.get(UUID.self, at: "chatId")
    guard let chatId = chatIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter chatId")
    }
    let users = try? request.query.get([UUID].self, at: "users")
    let body = try request.content.decode(String.self)
    return try backend.chatPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), chatId: chatId, body: body, users: users)
  }
  groupForBearer.on(.GET, "/exercise".asPathComponents) { (request: Request) -> EventLoopFuture<exerciseGetResponse> in
    return try backend.exerciseGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  app.on(.POST, "/forgotPassword".asPathComponents) { (request: Request) -> EventLoopFuture<forgotPasswordPostResponse> in
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    return try backend.forgotPasswordPost(with: request, email: email)
  }
  groupForBearer.on(.DELETE, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesDeleteResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    return try backend.groupEntriesDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId)
  }
  groupForBearer.on(.GET, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesGetResponse> in
    return try backend.groupEntriesGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.PATCH, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPatchResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    return try backend.groupEntriesPatch(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId)
  }
  groupForBearer.on(.POST, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPostResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    let messageOptional = try? request.query.get(String.self, at: "message")
    guard let message = messageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter message")
    }
    return try backend.groupEntriesPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId, message: message)
  }
  groupForBearer.on(.PUT, "/groupEntries".asPathComponents) { (request: Request) -> EventLoopFuture<groupEntriesPutResponse> in
    let groupEntryDTOIdOptional = try? request.query.get(UUID.self, at: "groupEntryDTOId")
    guard let groupEntryDTOId = groupEntryDTOIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupEntryDTOId")
    }
    let modifiedMessageOptional = try? request.query.get(String.self, at: "modifiedMessage")
    guard let modifiedMessage = modifiedMessageOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter modifiedMessage")
    }
    return try backend.groupEntriesPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupEntryDTOId: groupEntryDTOId, modifiedMessage: modifiedMessage)
  }
  groupForBearer.on(.DELETE, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingDeleteResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    return try backend.groupManagingDelete(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId)
  }
  groupForBearer.on(.GET, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingGetResponse> in
    return try backend.groupManagingGet(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/groupManaging".asPathComponents) { (request: Request) -> EventLoopFuture<groupManagingPostResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    return try backend.groupManagingPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId)
  }
  groupForBearer.on(.PUT, "/group".asPathComponents) { (request: Request) -> EventLoopFuture<groupPutResponse> in
    let groupIdOptional = try? request.query.get(UUID.self, at: "groupId")
    guard let groupId = groupIdOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter groupId")
    }
    let users = try? request.query.get([UUID].self, at: "users")
    let body = try request.content.decode(String.self)
    return try backend.groupPut(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), groupId: groupId, body: body, users: users)
  }
  groupForBearer.on(.POST, "/image".asPathComponents) { (request: Request) -> EventLoopFuture<imagePostResponse> in
    let body = try request.content.decode(String.self)
    return try backend.imagePost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), body: body)
  }
  app.on(.POST, "/login".asPathComponents) { (request: Request) -> EventLoopFuture<loginPostResponse> in
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    let passwordOptional = try? request.query.get(String.self, at: "password")
    guard let password = passwordOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter password")
    }
    return try backend.loginPost(with: request, email: email, password: password)
  }
  groupForBearer.on(.POST, "/logout".asPathComponents) { (request: Request) -> EventLoopFuture<logoutPostResponse> in
    return try backend.logoutPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  groupForBearer.on(.POST, "/refreshToken".asPathComponents) { (request: Request) -> EventLoopFuture<refreshTokenPostResponse> in
    return try backend.refreshTokenPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()))
  }
  app.on(.POST, "/register".asPathComponents) { (request: Request) -> EventLoopFuture<registerPostResponse> in
    let nameOptional = try? request.query.get(String.self, at: "name")
    guard let name = nameOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter name")
    }
    let emailOptional = try? request.query.get(String.self, at: "email")
    guard let email = emailOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter email")
    }
    let passwordOptional = try? request.query.get(String.self, at: "password")
    guard let password = passwordOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter password")
    }
    return try backend.registerPost(with: request, name: name, email: email, password: password)
  }
  groupForBearer.on(.POST, "/searchUser".asPathComponents) { (request: Request) -> EventLoopFuture<searchUserPostResponse> in
    let nameOptional = try? request.query.get(String.self, at: "name")
    guard let name = nameOptional else {
      throw Abort(HTTPResponseStatus.badRequest, reason: "Missing query parameter name")
    }
    return try backend.searchUserPost(with: request, asAuthenticated: request.auth.require(authForBearer.authType()), name: name)
  }
  app.on(.GET, "/test".asPathComponents) { (request: Request) -> EventLoopFuture<testGetResponse> in
    return try backend.testGet(with: request)
  }
}

